---
const { title, description, customClass } = Astro.props
---
<html lang="en" class={ customClass }>
<head>
	<meta charset="utf-8" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="generator" content={ Astro.generator } />
	<meta name="description" content={ description }>
	<title>{ title }</title>
</head>
<body>
	<slot />
</body>
</html>
<style is:global>
@font-face {
	font-family: "LexendDeca";
	src: url("/fonts/LexendDeca.woff2") format("woff2 supports variations"), url("/fonts/LexendDeca.woff2") format("woff2-variations");
	font-weight: 100 1000;
	font-display: swap;
}
@font-face {
	font-family: "LexendPeta";
	src: url("/fonts/LexendPeta.woff2") format("woff2 supports variations"), url("/fonts/LexendPeta.woff2") format("woff2-variations");
	font-weight: 100 1000;
	font-display: swap;
}
:root {
	--paper: #F8F8F7;
	--charcoal: #313549;
	--purple-oklch: oklch(55% 0.28 287);
	--purple: #733bff;
	--accent: var(--purple-oklch, var(--purple));
	--black-light: rgba(0, 0, 0, 0.1);
	--black-medium: rgba(0, 0, 0, 0.3);
	--black-strong: rgba(0, 0, 0, 0.8);
	--white: #fff;
	--yellow-oklch: oklch(92% 0.13 92);
	--yellow: #ffe38c;
	--stickie-yellow: var(--yellow-oklch, var(--yellow));
	--stickie-blue: #bbeeff;
	--stickie-green: #d0f580;
	--pink-oklch: oklch(92% 0.05 8);
	--pink: #ffdadf;
	--stickie-pink: var(--pink-oklch, var(--pink));
	--stickie-shadow: rgba(0, 0, 0, 0.1) 0 0.25rem 0.25rem -0.125rem, rgba(0, 0, 0, 0.06) 0 0.125rem 0.125rem -0.0625rem;
	--contour: 0.03125rem solid rgba(0, 0, 0, 0.025);
}
html {
	font-family: "LexendDeca", system-ui, sans-serif;
	font-size: 16px;
	font-weight: 350;
	line-height: 150%;
	color: var(--charcoal);
	background-color: var(--paper);
}
html.index :not(a):not(input):not(textarea):not(button) {
	cursor: grab;
}
body {
	width: fit-content;
}
html, body {
	overflow: hidden;
}
body, h1, h2, h3, h4, p, ul {
	margin: 0;
}
h1, h2 {
	font-weight: 650;
	font-size: 2.5em;
	line-height: 80%;
	letter-spacing: -0.03125em;
	text-transform: uppercase;
	overflow-wrap: break-word;
}
h1, h2, p {
    hyphens: auto;
}
h3 {
	font-weight: 550;
	font-size: 1.25em;
	line-height: 120%;
}
h4 {
	font-family: "LexendPeta";
	font-weight: 750;
	font-size: 0.75em;
	line-height: 133%;
	text-transform: uppercase;
}
p {
	font-size: 1em;
	line-height: 150%;
}
ul {
	padding-left: 1.5em;
}
a, a:visited {
	color: inherit;
	font-weight: 350;
	overflow-wrap: break-word;
	border-radius: 0.03125rem;
}
a:hover {
	color: var(--black-medium);
}
a:active {
	color: var(--accent);
}
a:focus-visible {
	outline: 0.1875rem dashed var(--accent);
	outline-offset: 0.0625rem;
}
button:focus-visible {
	outline: 0.1875rem dashed var(--accent);
	outline-offset: 0.0625rem;
}
main {
	display: flex;
	flex-direction: row;
	align-items: flex-start;
	gap: 4em;
	padding: 0;
	background-image: radial-gradient(var(--black-light) 0.0625em, transparent 0.0625em);
	background-size: 2em 2em;
	background-position: 0 0;
	padding: 4em;
}
section {
	display: flex;
	flex-direction: column;
	align-items: flex-start;
	gap: 2em;
	padding: 4em;
}
section:not(:first-child) article:not(:last-child) {
	margin-bottom: 2em;
}
section:nth-child(2) article > * {
    background-color: var(--stickie-blue);
}
section:nth-child(3) article > * {
    background-color: var(--stickie-green);
}
section:nth-child(4) article > * {
    background-color: var(--stickie-pink);
}
small {
	font-size: 0.75em;
	font-weight: 375;
	line-height: 133%;
	color: var(--black-medium);
	padding: 0 1rem;
}
small a:hover {
	color: var(--black-strong);
}
</style>
<script>
// Panzoom
import panzoom from 'panzoom';
const canvas = document.getElementById('canvas') as HTMLElement;
const inputElements = document.querySelectorAll('input, textarea, button, a');
const pz = panzoom(canvas, {
	maxZoom: 4,
	minZoom: 0.125,
	zoomDoubleClickSpeed: 1,
});
pz.zoomAbs(32, 32, 0.75);
inputElements.forEach((input) => {
	input.addEventListener('focus', () => {
		pz.pause();
	});
	input.addEventListener('blur', () => {
		pz.resume();
	});
	input.addEventListener('touchstart', (event) => {
		event.stopPropagation();
	});
});
document.addEventListener('touchstart', (event) => {
	const isInputFocused = Array.from(inputElements).some((input) =>
		input.contains(event.target as Node)
	);
	if (!isInputFocused) {
		pz.resume();
	}
});
</script>