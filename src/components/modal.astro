---
const { title, openID, uiMode } = Astro.props;
import { Content as Welcome } from '../content/base/01-welcome.md';
import { Content as Info } from '../content/extra/info.md';
---
<div id="modal" role="dialog" aria-modal="true" class={ uiMode }>
    <div class="dialog">
        <header>
            <h3>{ title }</h3>
            <div class="button-3d">
                <button id="closeModal" class="dark" title="Hit escape to close">Esc</button>
            </div>
        </header>
        <div class="content">
            <Welcome />
            <Info />
            <slot />
        </div>
    </div>
</div>
<style>
#modal {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: var(--l-modality);
    background-color: var(--paper-fade);
    backdrop-filter: blur(0.25rem);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.1s linear;
}
#modal.active {
    opacity: 1;
    pointer-events: auto;
}
.dialog {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    position: fixed;
    top: 50%;
    left: 50%;
    width: 24rem;
    max-width: 100%;
    max-height: 90vh;
    max-height: 90dvh;
    transform: translate(-50%, 100%);
    border-radius: var(--se);
    background-color: var(--paper);
    box-shadow: var(--shadow-b);
    opacity: 0;
    transition: transform 0.2s ease-out, opacity 0.2s ease-out;
}
.active .dialog {
    opacity: 1;
    transform: translate(-50%, -50%);
}
header {
    display: flex;
    align-items: center;
    padding: 1.5rem;
}
header > :first-child {
    flex: 1;
    text-transform: uppercase;
    letter-spacing: 0.0625em;
}
.content {
    box-sizing: border-box;
    padding: 0 1.5rem 1.75rem;
    overflow-y: auto;
}
#modal :global(p + p), #modal :global(p + h4), #modal :global(ul + p), #modal :global([tags] + *) {
    margin-top: 1rem;
}
:global(.conceal > :not(#modal)) {
    pointer-events: none;
}
@media (max-width: 480px) {
    .dialog {
        top: auto;
        bottom: 0;
        width: 100%;
        max-height: 80vh;
        max-height: 80dvh;
        border-radius: var(--se) var(--se) 0 0;
    }
    .active .dialog {
        transform: translate(-50%, 0);
    }
    .content {
        padding-bottom: 3rem;
    }
}
@media (min-width: 481px) and (max-height: 480px) {
    .dialog {
        top: auto;
        bottom: 0;
        max-height: 90vh;
        max-height: 90dvh;
        border-radius: var(--se) var(--se) 0 0;
    }
    .active .dialog {
        transform: translate(-50%, 0);
    }
}
</style>
<script define:vars={{ openID }}>

// Elements
const openButton = document.getElementById(openID);
const modal = document.getElementById('modal');
const modalContent = document.querySelector('#modal .dialog');
const modalParent = modal.parentNode;
const closeButton = document.getElementById('closeModal');
const focusElements = Array.from(modal.querySelectorAll('input, button, textarea, select, a[href]'));
const [firstFocus, lastFocus] = [focusElements[0], focusElements[focusElements.length - 1]];

// Functions

// Trap Focus
function trapFocus(event) {
    if (event.key === 'Tab' || event.keyCode === 9) {
        if (event.shiftKey) {
            if (document.activeElement === firstFocus) {
                event.preventDefault();
                lastFocus.focus();
            }
        } else {
            if (document.activeElement === lastFocus) {
                event.preventDefault();
                firstFocus.focus();
            }
        }
    }
}

// Open Modal
function openModal() {
    modal.classList.add('active');
    modalParent.classList.add('conceal');
    modalContent.addEventListener('keydown', trapFocus);
    setTimeout(() => {
        firstFocus.focus();
    }, 0);
}

// Close Modal
function closeModal() {
    modal.classList.remove('active');
    modalParent.classList.remove('conceal');
    modalContent.removeEventListener('keydown', trapFocus);
    openButton.focus();
}

// Initialization

// Opening
openButton.addEventListener('click', openModal);

// Closing with Button
closeButton.addEventListener('click', closeModal);
closeButton.addEventListener('blur', (event) => {
    if (modal.classList.contains('active')) {
        event.preventDefault();
        firstFocus.focus();
    }
});

// Closing on outside click
modal.addEventListener('click', (event) => {
    if (event.target === modal) {
        event.preventDefault();
        closeModal();
    }
});

// Closing on Escape key
document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
        closeModal();
    }
});
</script>