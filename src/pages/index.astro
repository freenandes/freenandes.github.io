---
// Definitions
const title = "Pedro MC Fernandes, Product Designer";
const description = "Hi ðŸ‘‹ This is my website. It's where I show myself as a Product Designer. If you need one, get in touch so we can start talking. Have a nice one!";
const customClass = "index";
const sections = [
	{ title: 'PMCF.XYZ', normTitle: 'pmcf-xyz' },
	{ title: 'X', normTitle: 'who' },
	{ title: 'Why', normTitle: 'why' },
	{ title: 'See', normTitle: 'wat' },
];

// Components
import Shell from '../layouts/Shell.astro';
import Stickie from '../components/stickie.astro';
import Contact from '../components/contact.astro';
import Modal from '../components/modal.astro';

// Content

	// Collections
import { getCollection } from 'astro:content';
const firstSection = await getCollection('base');
const secondSection = await getCollection('who');
const thirdSection = await getCollection('why');
const fourthSection = await getCollection('see');

	// Footer
import { Content as Footer } from '../content/extra/footer.md';
---
<Shell title={ title } description={ description } customClass={ customClass }>
	<div class="controls">
		<div class="button-3d">
			<button id="info" class="dark" data-title="About this website">Info</button>
		</div>
		<div class="button-3d group">
			<button id="zoomOut" class="dark" data-title="Zoom out">-</button>
			<button id="zoomIn" class="dark" data-title="Zoom in">+</button>
		</div>
		<div class="button-3d">
			<button id="resetNav" class="dark" data-title="Reset to initial position">[]</button>
		</div>
	</div>
	<div id="canvas" class="whiteboard">
		<div id="plumbing"></div>
		<main>
			<!-- I N T R O -->
			<section id={sections[0].normTitle}>
				<aside id="note-start">Start Here!</aside>
				<h1 class="title">{sections[0].title}</h1>
				{
					firstSection.map(async (post) => {
						const { Content } = await post.render()
						return (
						<Stickie>
							<Content />
						</Stickie>
						)
					})
				}
				<aside id="note-contact">Get in touch</aside>
				<Contact />
				<small class="footnote">
					<Footer />
				</small>
			</section>
			<!-- W H O -->
			<section id={sections[1].normTitle}>
				<aside id="note-who">Pedro Who?!</aside>
				<h2 class="title">{sections[1].title}</h2>
				{
					secondSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[1].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
			<!-- W H Y -->
			<section id={sections[2].normTitle}>
				<aside id="note-why">A whole career, going steady</aside>
				<h2 class="title">{sections[2].title}</h2>
				{
					thirdSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[2].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
			<!-- S E E -->
			<section id={sections[3].normTitle}>
				<aside id="note-see">Sneak peek at how I've been working</aside>
				<h2 class="title">{sections[3].title}</h2>
				{
					fourthSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[3].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
			<aside id="note-end">Thank you for watching â™¥</aside>
		</main>
	</div>
	<Modal title="Info" openID="info" uiMode="dark" />
</Shell>
<style>
html.index :not(a):not(input):not(textarea):not(button) {
	cursor: grab;
}
body {
	position: fixed;
	width: 100vw;
	height: 100vh;
	height: 100dvh;
}
.whiteboard {
	position: absolute;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	height: 100dvh;
	border: none;
	outline: none;
}
main {
	box-sizing: border-box;
	display: flex;
	flex-direction: row;
	align-items: flex-start;
	gap: 7em;
	width: fit-content;
	padding: 16em;
	/*background-size: 1em 1em;*/
	background-position: 0 0;
	/*background-image: radial-gradient(var(--black-light) 0.0625em, transparent 0.0625em);*/
}
.title {
	box-sizing: border-box;
	display: block;
	width: 100%;
	padding: 1.25rem;
	margin-bottom: 3rem;
	border-radius: var(--sd);
	color: var(--paper);
	background-color: var(--charcoal);
}
#pmcf-xyz .title {
	text-align: center;
}
:global(#pmcf-xyz h2), :global(#pmcf-xyz h3) {
	font-family: "LexendPeta";
	font-weight: 750;
	font-size: 0.75em;
	line-height: 133%;
	text-transform: uppercase;
}
section {
	padding: 7em;
	border-radius: var(--sf);
	background-color: var(--yellow-fade);
}
section#who {
	background-color: var(--blue-fade);
}
section#why {
	background-color: var(--green-fade);
}
section#wat {
	background-color: var(--pink-fade);
}
section:not(#pmcf-xyz) :global(article:not(:last-child)) {
	margin-bottom: 8em;
}
section:nth-child(2) :global(article > *) {
    background-color: var(--stickie-blue);
}
section:nth-child(3) :global(article > *) {
    background-color: var(--stickie-green);
}
section:nth-child(4) :global(article > *) {
    background-color: var(--stickie-pink);
}
.controls {
	display: flex;
	flex-wrap: wrap-reverse;
	justify-content: flex-end;
	gap: 0.5em;
	position: fixed;
	max-width: calc(100vw - 2em);
	right: 1em;
	bottom: 1em;
	z-index: var(--l-float);
}
.footnote {
	margin-top: 1rem;
}
/* Annotations */
aside[id] {
	font-size: 4em;
	position: absolute;
	text-align: center;
}
aside#note-start {
	top: 12rem;
	left: 6rem;
	width: 14rem;
	transform: rotate(350deg);
}
aside#note-contact {
	top: 86rem;
	left: 42rem;
	width: 16rem;
	transform: rotate(10deg);
}
aside#note-who {
	top: 3rem;
	left: 56rem;
	width: 12rem;
	transform: rotate(340deg);
}
aside#note-why {
	top: 48rem;
	left: 136rem;
	width: 36rem;
	transform: rotate(280deg);
}
aside#note-see {
	top: 1rem;
	left: 248rem;
	width: 42rem;
	transform: rotate(5deg);
}
aside#note-end {
	top: 240rem;
	left: 410rem;
	width: 42rem;
	transform: rotate(300deg);
}
/* Content design */
section#pmcf-xyz {
	max-width: var(--maxcol-01);
}
/* Media queries */
@media (max-width: 480px) {
	.controls {
		flex-wrap: wrap;
		justify-content: flex-start;
		right: auto;
		left: 1em;
		gap: 1em;
	}
	.controls button {
		border-radius: 0.234375em;
	}
}
</style>