---

// Imports

import PMCF from '../layouts/PMCF.astro';
import { getCollection, getEntries, getEntry } from 'astro:content';
import {Image} from 'astro:assets';
import Footer from '../components/footer.astro';

// Content

const preface = await getCollection('pmcf');
const intro = await getEntry('extra', 'pmcf-intro');
const {Content} = await intro.render();
const description = "Product designer in Lisbon, Portugal. Wants to design interfaces that help people embrace technology and live better.";

---

<PMCF title={intro.data.title} description={description}>
	<svg style="display: none">
		<symbol id="dCorner" viewBox="0 0 256 256">
			<path d="M256 0.5V0H0V256H0.5C0.5 239.187 3.25 222.547 9.75 207.016C16.1251 191.484 25.625 177.375 37.5 165.492C46.25 156.788 56.1251 149.414 66.875 143.562C70.875 141.414 74.875 139.469 79.0001 137.742C94.5 131.313 111.25 128 128 128C128 111.187 131.25 94.5468 137.75 79.0157C141.626 69.5703 146.625 60.6484 152.75 52.4297C156.625 47.1406 160.876 42.1485 165.5 37.4922C177.375 25.6015 191.5 16.1797 207 9.74218C222.5 3.3125 239.25 0.5 256 0.5Z" />
		</symbol>
		<symbol id="arrow" viewBox="0 0 16 16">
			<path d="M1 8 L14 8" stroke-linecap="butt" />
			<path d="M14 8 L10 4" stroke-linecap="square" />
			<path d="M14 8 L10 12" stroke-linecap="square" />
		</symbol>
	</svg>
	<header class="init">
		<div class="reel">
			<div id={intro.slug} class="description card">
				<svg id="cardoon" width="48" height="48" viewBox="0 0 48 48">
					<path d="m15 22 1 2 1 3 1-3 3 3 3-3 3 3 3-3 1 3 1-3 1-2" stroke-miterlimit="0" stroke-linejoin="bevel"/>
					<path d="m15 26 2 1 2 2m0 0 2-2 3 2m-5 0h-2m2 0 2 1 3-1m0 0 3-2 2 2m-5 0 3 1 2-1m0 0 2-2 2-1m-4 3h2m-15-6 1-2m0 0 1 3 3-3m-4 0v-2m0 2 2-2m2 2 3 3 3-3m-6 0-2-2m2 2 3-2m3 2 3 3 .937-3M27 21l-3-2m3 2 2-2m1.937 2L32 23m-1.063-2L29 19m1.937 2L31 19m-12 0 2-2 3 2m0 0 3-2 2 2" stroke-miterlimit="0" stroke-linejoin="bevel"/>
					<path d="M26 17s0-3 3-6m-7 6s0-3-3-6m8 6s0-3 3-3m-9 3s0-3-3-3m7 4s0-5 2-9m-4 9s0-5-2-9" stroke-miterlimit="0"/>
					<path d="M24 19V8" stroke-miterlimit="0" stroke-linejoin="bevel"/>
					<path clip-rule="evenodd" d="M27 30s2 1 4 1 6 0 6-4c0 0 4 2 1-6 0 0 5 0-2-6 3 0 1.581-1.419 0-3l-4-4s4 1 6 3c1.581 1.581 1 4 3 2 0 0-1 8 3 7 0 0-6 9-1 8 0 0-3 3-6 4-7.225 2.408-12-1-12-1l2-1Zm-6 0s-2 1-4 1-6 0-6-4c0 0-4 2-1-6 0 0-5 0 2-6-3 0-1.581-1.419 0-3l4-4s-4 1-6 3c-1.581 1.581-1 4-3 2 0 0 1 8-3 7 0 0 6 9 1 8 0 0 3 3 6 4 7.225 2.408 12-1 12-1l-2-1Z" stroke-miterlimit="10"/>
					<path d="M24 31s0 6 5 8c-1-3 7 1 7 1-1-2 0-2 3-2 4.123 0 5-5 5-5s-2 2-5 3c-3.912 1.304-3-1-3-1-6 3-5 0-5 0-5 1-6-4-6-4h-1Zm0 0s0 6-5 8c1-3-7 1-7 1 1-2 0-2-3-2-4.123 0-5-5-5-5s2 2 5 3c3.911 1.304 3-1 3-1 6 3 5 0 5 0 5 1 6-4 6-4h1Z" stroke-miterlimit="10"/>
				</svg>
				<h1>{intro.data.title}</h1>
				<Content />
			</div>
		</div>
	</header>
	{preface.map(async (preface) => {
		const {Content} = await preface.render();
		const relatedPosts = await getEntries(preface.data.relatedPosts);
		return (
			<section class="gallery init">
				<button class="nav next" aria-label="Next slide">
					<svg class="icon" width="16" height="16" viewBox="0 0 16 16">
						<use xlink:href="#arrow" />
					</svg>
				</button>
				<button class="nav prev" aria-label="Previous slide">
					<svg class="icon" width="16" height="16">
						<use xlink:href="#arrow" />
					</svg>
				</button>
				<div class="reel">
					<div id=`pre-${preface.slug}` class="description card">
						<Content />
						<a class="cta next" aria-label="Next slide">
							<svg class="icon" width="16" height="16">
								<use xlink:href="#arrow" />
							</svg>
						</a>
					</div>
					{relatedPosts.map(relatedPost => (
						<article class="link card">
							<a href=`/${relatedPost.collection}/${relatedPost.slug}`>
								<Image src={relatedPost.data.cover} alt="Decorative image" densities={[1.5, 2, 2.5, 3]} />
								<span>{relatedPost.data.title}</span>
							</a>
							<svg width="256" height="256"><use xlink:href="#dCorner" /></svg><svg width="256" height="256"><use xlink:href="#dCorner" /></svg><svg width="256" height="256"><use xlink:href="#dCorner" /></svg><svg width="256" height="256"><use xlink:href="#dCorner" /></svg>
						</article>
					))}
				</div>
			</section>
		)}
	)}
	<Footer />
</PMCF>

<style is:global>

/* Layout */

body {
	--galleryNavFontSize: calc(1.5em + 2vw);
	--galleryNavLenght: calc(var(--galleryNavFontSize) * 0.75);
	--slideLinkWidth: calc(100vw - var(--slideMarginTotal) - var(--scrollbarWidth));
	/* --slideLinkShadow: 0 0 48px 0 hsla(0, 0%, 0%, 0.2); */
}
/* #dCorner path {
	box-shadow: var(--slideLinkShadow);
} */
section.gallery {
	position: relative;
}
.gallery .nav {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	z-index: 2;
	font-family: var(--ffLexendPeta);
	font-size: var(--galleryNavFontSize);
	font-weight: calc(var(--fwBase) - 25);
	display: flex;
	justify-content: center;
	align-items: center;
	width: var(--galleryNavLenght);
	height: var(--galleryNavLenght);
	padding: calc(var(--galleryNavLenght) / 6);
	border-radius: var(--galleryNavLenght);
	color: var(--ink);
	background-color: var(--paper);
	/* box-shadow: 0 var(--s16p) var(--s32p) 0 rgba(0, 0, 0, 0.05), 0 var(--s4p) var(--s8p) 0 rgba(0, 0, 0, 0.1), 0 var(--s2p) var(--s4p) 0 rgba(0, 0, 0, 0.2); */
	transition: background-color 0.2s ease-in, opacity 0.2s ease-out, box-shadow 0.2s ease-out;
}
.gallery .nav svg {
	width: 100%;
	height: auto;
}
#arrow path {
	stroke: currentColor;
	stroke-width: 0.09375rem;
}
.gallery .nav:hover {
	color: var(--paper);
	background-color: var(--ink);
	/* box-shadow: 0 0 var(--s8p) 0 rgba(0, 0, 0, 0.1), 0 0 var(--s2p) 0 rgba(0, 0, 0, 0.2), 0 0 var(--s1p) 0 rgba(0, 0, 0, 0.4); */
	opacity: 1;
}
.gallery .nav.hidden {
	opacity: 0;
	pointer-events: none;
}
.nav.next {
	right: 1vw;
}
.nav.prev {
	left: 1vw;
}
.nav.prev svg {
	transform: rotate(180deg);
}
.gallery .cta {
	align-self: flex-start;
	box-sizing: content-box;
	font-size: calc(var(--fsBase) * 2);
	padding: 0.5em;
	margin: 0 -0.5em;
}
.gallery .cta,
.gallery a.cta::after {
	display: none;
}
.gallery .cta svg {
	display: inline-block;
	width: calc(var(--fsBase) * 1);
	height: auto;
}
.reel {
	display: flex;
	align-items: center;
	overflow-x: auto;
	overflow-y: hidden;
	scroll-snap-type: x mandatory;
	/* scroll-snap-stop: always; */
	scrollbar-width: none;
}
.reel::-webkit-scrollbar {
	display: none;
}

/* Card Component */

.card {
	scroll-snap-align: center;
	flex-shrink: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	box-sizing: content-box;
	margin: var(--slideMargin) 0 0;
	overflow: hidden;
}
.reel .card:last-child {
	margin-right: var(--slideMargin);
}

/* Description Card */

.description.card {
	width: var(--slideDescWidth);
	max-width: var(--slideDescContentWidth);
	min-height: calc(100vh - var(--slideMarginTotal) - var(--slidePaddingTotal));
	height: fit-content;
	max-height: calc(100vh - var(--slideMarginTotal));
	padding: var(--slidePadding);
	margin-left: var(--slideMargin);
	border-radius: var(--slidePadding);
	background-position: center;
	clip-path: var(--clipBevel);
}
.description.card > p {
	margin-right: -0.25em;
}

/* Link Card */

.link.card {
	position: relative;
	width: calc(var(--slideLinkWidth) / 1.375);
	max-width: 40em;
	min-height: calc((100vh - var(--slideMarginTotal) - var(--slidePaddingTotal)) / 2);
	height: fit-content;
	max-height: calc(100vh - var(--slideMarginTotal));
	aspect-ratio: 3 / 4;
	background-color: var(--cru);
}
@supports not (aspect-ratio: 3 / 4) {
	.link.card::before {
		float: left;
		padding-top: 100%;
		content: "";
	}
	.link.card::after {
		display: block;
		content: "";
		clear: both;
	}
}
.link.card:nth-of-type(4n+2) {
	align-self: flex-start;
}
.link.card:nth-of-type(4n+4) {
	align-self: flex-end;
}
.link.card > svg {
	position: absolute;
	width: auto;
	height: var(--cvB1);
	max-height: 15em;
	fill: var(--paper);
	pointer-events: none;
}
.link.card > svg:nth-of-type(1) {
	top: -0.05vw;
	left: -0.05vw;
}
.link.card > svg:nth-of-type(2) {
	top: -0.05vw;
	right: -0.05vw;
	transform: rotate(90deg);
}
.link.card > svg:nth-of-type(3) {
	bottom: -0.05vw;
	left: -0.05vw;
	transform: rotate(270deg);
}
.link.card > svg:nth-of-type(4) {
	right: -0.05vw;
	bottom: -0.05vw;
	transform: rotate(180deg);
}
.link.card a {
	position: absolute;
	display: flex;
	justify-content: center;
	align-items: center;
	font-family: var(--ffLexendPeta);
	font-weight: calc(var(--fwBase) + 225);
	font-size: calc(var(--fsBase) / 1.0625);
	line-height: 112.5%;
	text-decoration: none;
	text-transform: uppercase;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	/* box-shadow: var(--slideLinkShadow) inset; */
}
.link.card a:hover {
	opacity: unset;
	color: var(--paper);
}
.link.card img {
	position: absolute;
	width: 100%;
	height: 100%;
	object-fit: cover;
	opacity: 0.2;
	transition: all 0.2s ease-out;
}
.link.card span {
	text-align: center;
	padding: 0.125em 0.25em;
	margin: 1em;
	border-radius: var(--s4p);
	z-index: 1;
}
.link.card a:hover span {
	background-color: var(--charcoal);
}
.link.card a:hover img {
	transform: scale(1.1);
	opacity: 1;
	filter: contrast(50%) invert(100%) hue-rotate(285deg) saturate(150%);
}
.link.card a:hover span {
	animation: blink 0.4s steps(1) infinite;
}

/* Card Content */

.card *:nth-child(1) {
	margin-top: 0;
}
.card:not(#pmcf-intro) *:nth-last-child(1),
.card:not(#pmcf-intro) p:nth-last-of-type(1) {
	margin-bottom: 0;
}
#pmcf-intro {
	background-image: url(../assets/pmcf/azulejo01.svg);
	background-size: calc(var(--fsBase) * 35);
}
#cardoon {
	width: calc(var(--fsBase) * 8);
	height: calc(var(--fsBase) * 8);
	fill: none;
	stroke: currentColor;
	stroke-width: 0.05em;
	stroke-linecap: square;
	margin: -0.75em -0.75em 0;
}
#cardoon + h1 {
	margin-top: 0;
}
#pre-01 {
	background-image: url(../assets/pmcf/azulejo02.svg);
	background-size: calc(var(--fsBase) * 41);
}
#pre-02 {
	background-image: url(../assets/pmcf/azulejo03.svg);
	background-size: calc(var(--fsBase) * 60);
}
#pre-03 {
	background-image: url(../assets/pmcf/azulejo04.svg);
	background-size: calc(var(--fsBase) * 50);
}
#pre-04 {
	background-image: url(../assets/pmcf/azulejo05.svg);
	background-size: calc(var(--fsBase) * 65);
}

/* Constraints */

@media (min-width: 53em) {
	.reel .card:first-child {
		margin-left: var(--slideDescMargins);
	}
	.reel .card:last-child {
		margin-right: var(--slideDescMargins);
	}
	.link.card {
		width: calc(var(--slideLinkWidth) / 2);
	}
}
@media (pointer: coarse) and (max-width: 50em) {
    .gallery .nav {
        display: none;
    }
	.gallery .cta:not(.hidden) {
		display: inline;
	}
}
@media (max-width: 30em) and (min-height: 40em) {
	.description.card {
		min-height: calc(70vh - var(--slideMarginTotal) - var(--slidePaddingTotal));
	}
	.link.card {
		min-height: calc((70vh - var(--slideMarginTotal) - var(--slidePaddingTotal)) / 2);
	}
}

</style>

<script>

// Previous/Next buttons for reels

function initializeButtonFunctionality() {
    const reels = document.querySelectorAll<HTMLElement>('.reel');
    reels.forEach(reel => {
        const prevButton = reel.previousElementSibling as HTMLElement;
        const nextButton = reel.previousElementSibling?.previousElementSibling as HTMLElement;
		const inlineNextButton = reel.querySelector('.cta.next') as HTMLElement; 
        if (!prevButton || !nextButton || !inlineNextButton) return;
        const handleVisibilityUpdate = () => {
            setButtonVisibility(reel, prevButton, nextButton, inlineNextButton);
        };
        prevButton.addEventListener('click', () => {
            scrollToCard(reel, -1);
            handleVisibilityUpdate();
        });
        nextButton.addEventListener('click', () => {
            scrollToCard(reel, 1);
            handleVisibilityUpdate();
        });
		inlineNextButton.addEventListener('click', () => {
            scrollToCard(reel, 1);
            // handleVisibilityUpdate();
        });
        reel.addEventListener('scroll', handleVisibilityUpdate);
        handleVisibilityUpdate();
    });
}
function setButtonVisibility(reel: HTMLElement, prevButton: HTMLElement, nextButton: HTMLElement, inlineNextButton: HTMLElement) {
	const tolerance = 4;
    if (reel.scrollLeft <= tolerance) {
        prevButton.classList.add('hidden');
    } else {
        prevButton.classList.remove('hidden');
    }
    if (reel.scrollLeft + reel.clientWidth + tolerance >= reel.scrollWidth) {
        nextButton.classList.add('hidden');
		// inlineNextButton.classList.add('hidden');
    } else {
        nextButton.classList.remove('hidden');
		// inlineNextButton.classList.remove('hidden');
    }
}
const scrollToCard = (reel: HTMLElement, direction: number) => {
    const cards = reel.querySelectorAll('.card');
    const currentScrollPosition = reel.scrollLeft;
    const cardWidth = cards.length ? (cards[0] as HTMLElement).offsetWidth : 0;
    const newScrollPosition = currentScrollPosition + cardWidth * direction;
    reel.scroll({
        left: newScrollPosition,
        behavior: 'smooth'
    });
};
window.onload = initializeButtonFunctionality;

</script>