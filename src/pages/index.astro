---

// Imports

import PMCF from '../layouts/PMCF.astro';
import { getCollection, getEntries, getEntry } from 'astro:content';
import {Image} from 'astro:assets';

// Content

const preface = await getCollection('pmcf');
const intro = await getEntry('extra', 'pmcf-intro');
const {Content} = await intro.render();

---

<PMCF title={intro.data.title} description={intro.body}>
	<svg style="display: none">
		<symbol id="dCorner" viewBox="0 0 2 2">
		  	<path d="M2 0H0V2C0 1.86865 0.0253906 1.73865 0.0761719 1.61731C0.125977 1.49597 0.200195 1.38574 0.292969 1.29291C0.361328 1.22491 0.438477 1.1673 0.522461 1.12158C0.553711 1.1048 0.584961 1.0896 0.617188 1.07611C0.738281 1.02588 0.869141 1 1 1C1 0.868652 1.02539 0.738647 1.07617 0.61731C1.10645 0.543518 1.14551 0.473816 1.19336 0.409607C1.22363 0.368286 1.25684 0.329285 1.29297 0.292908C1.38574 0.200012 1.49609 0.126404 1.61719 0.0761108C1.73828 0.0258789 1.86914 0 2 0Z" />
		</symbol>
	</svg>
	<header class="init">
		<div class="reel">
			<div id={intro.slug} class="description card">
				<h1>{intro.data.title}</h1>
				<Content />
			</div>
		</div>
	</header>
	{preface.map(async (preface) => {
		const {Content} = await preface.render();
		const relatedPosts = await getEntries(preface.data.relatedPosts);
		return (
			<section class="gallery init">
				<button class="nav next" aria-label="Next slide">
					<svg class="icon" width="16" height="16" viewBox="0 0 16 16">
						<path d="M2 8 L14 8" />
						<path d="M14 8 L10 4" />
						<path d="M14 8 L10 12" />
					</svg>
				</button>
				<button class="nav prev" aria-label="Previous slide">
					<svg class="icon" width="16" height="16" viewBox="0 0 16 16">
						<path d="M2 8 L14 8" />
						<path d="M14 8 L10 4" />
						<path d="M14 8 L10 12" />
					</svg>
				</button>
				<div class="reel">
					<div id=`pre-${preface.slug}` class="description card">
						<Content />
						<a class="cta next" aria-label="Next slide">
							<svg class="icon" width="16" height="16" viewBox="0 0 16 16">
								<path d="M2 8 L14 8" />
								<path d="M14 8 L10 4" />
								<path d="M14 8 L10 12" />
							</svg>
						</a>
					</div>
					{relatedPosts.map(relatedPost => (
						<article class="link card">
							<a href=`/${relatedPost.collection}/${relatedPost.slug}`>
								<Image src={relatedPost.data.cover} alt={relatedPost.data.coverAlt} />
								<span>{relatedPost.data.title}</span>
							</a>
							<svg width="2" height="2" viewBox="0 0 2 2"><use xlink:href="#dCorner" /></svg><svg width="2" height="2" viewBox="0 0 2 2"><use xlink:href="#dCorner" /></svg><svg width="2" height="2" viewBox="0 0 2 2"><use xlink:href="#dCorner" /></svg><svg width="2" height="2" viewBox="0 0 2 2"><use xlink:href="#dCorner" /></svg>
						</article>
					))}
				</div>
			</section>
		)}
	)}
	<!-- <svg id="decOne" class="blob" width="1000" height="1000" viewBox="0 0 1000 1000" fill="none" xmlns="http://www.w3.org/2000/svg">
		<title>Decorative ellipse shape filled with a chromatic gradient</title>
		<defs>
			<filter id="powerBlur" x="0" y="0" width="100%" height="100%" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
				<feFlood flood-opacity="0" result="bgImageFix" />
				<feBlend mode="normal" in="SourceGraphic" in2="bgImageFix" result="withTransparency" />
				<feGaussianBlur in="withTransparency" stdDeviation="100" result="blurred" />
				<feTurbulence baseFrequency="1.5" result="noise" />
				<feComposite in="blurred" in2="noise" operator="out" />
			</filter>
			<linearGradient id="ellipseFill" x1="25%" y1="0%" x2="75%" y2="100%" gradientUnits="userSpaceOnUse">
				<stop stop-color="red" />
				<stop offset="1" stop-color="blue" />
			</linearGradient>
		</defs>
		<ellipse cx="50%" cy="50%" rx="25%" ry="25%" fill="url(#ellipseFill)" filter="url(#powerBlur)" />
	</svg> -->
	<footer class="clmnzd">
		<form class="contact init" action="https://formspree.io/f/mnqyrkwr" method="POST" accept-charset="UTF-8">
			<fieldset class="card">
				<legend>Contact Pedro</legend>
				<label for="email">Your Email</label>
				<input type="email" id="email" name="email" maxlength="200" required autocomplete="on">
				<label for="message">The Message</label>
				<textarea id="message" name="message" maxlength="2000" required></textarea>
				<button type="submit">Send thy missive</button>
			</fieldset>
		</form>
		<nav class="hyperlinks init">
			<a href="/whiteboard">
				<span>Meet Pedro, a Whiteboard</span>
			</a>
			<a href="/cv">
				<span>About Pedro, the Curriculum</span>
			</a>
			<a href="https://www.are.na/p-m-c-f" target="_blank">
				<span>Are.na</span>
			</a>
			<a rel="me" href="https://mastodon.social/@freenandes" target="_blank">
				<span>Mastodon</span>
			</a>
			<a href="https://www.linkedin.com/in/pmcfernandes/" target="_blank">
				<span>LinkedIn</span>
			</a>
		</nav>
		<small class="footnote init">
			Website designed, illustrated and assembled by me in 2023, inspired by portuguese cultural references using: <a href="https://www.lexend.com/" target="_blank">Lexend typefaces</a> by Bonnie Shaver-Troup and Thomas Jockin; Coconat Extended font by <a href="https://saralavazza.it/" target="_blank">Sara Lavazza</a>; Compagnon Script font by <a href="https://www.chloelozano.fr/" target="_blank">Chlo√© Lozano</a>; and <a href="https://astro.build/" target="_blank">Astro's web framework</a>.
		</small>
	</footer>
</PMCF>

<style is:global>

/* Layout */

section.gallery {
	position: relative;
}
.gallery .nav {
	--galleryNavFontSize: calc(1.5em + 2vw);
	--galleryNavLenght: calc(var(--galleryNavFontSize) * 0.75);
	position: absolute;
	top: 50%;
	transform: translateY(-50%);
	z-index: 2;
	font-family: var(--ffLexendPeta);
	font-size: var(--galleryNavFontSize);
	font-weight: calc(var(--fwBase) - 25);
	display: flex;
	justify-content: center;
	align-items: center;
	width: var(--galleryNavLenght);
	height: var(--galleryNavLenght);
	padding: calc(var(--galleryNavLenght) / 6);
	border-radius: var(--galleryNavLenght);
	color: var(--paper);
	background-color: var(--paper);
	box-shadow: 0 var(--s16p) var(--s32p) 0 rgba(0, 0, 0, 0.05), 0 var(--s4p) var(--s8p) 0 rgba(0, 0, 0, 0.1), 0 var(--s2p) var(--s4p) 0 rgba(0, 0, 0, 0.2);
	transition: background-color 0.2s ease-in, opacity 0.2s ease-out, box-shadow 0.2s ease-out;
}
.gallery .nav svg {
	width: 100%;
	height: auto;
}
.gallery .nav path {
	stroke: var(--paper);
	stroke-width: 0.09375rem;
	stroke-linecap: round;
}
.gallery .nav:hover {
	background-color: var(--ink);
	box-shadow: 0 0 var(--s8p) 0 rgba(0, 0, 0, 0.1), 0 0 var(--s2p) 0 rgba(0, 0, 0, 0.2), 0 0 var(--s1p) 0 rgba(0, 0, 0, 0.4);
	opacity: 1;
}
.gallery .nav.hidden {
	opacity: 0;
	pointer-events: none;
}
.nav.next {
	right: 1vw;
}
.nav.prev {
	left: 1vw;
}
.nav.prev svg {
	transform: rotate(180deg);
}
.gallery .cta {
	align-self: flex-start;
	box-sizing: content-box;
	font-size: calc(var(--fsBase) * 2);
	padding: 0.5em;
	margin: -0.5em;
}
.gallery .cta {
	display: none;
}
.gallery .cta svg {
	display: inline-block;
	width: calc(var(--fsBase) * 1);
	height: auto;
}
.reel {
	display: flex;
	align-items: center;
	overflow-x: auto;
	overflow-y: hidden;
	scroll-snap-type: x mandatory;
	/* scroll-snap-stop: always; */
	scrollbar-width: none;
}
.reel::-webkit-scrollbar {
	display: none;
}

/* Card Component */

.card {
	scroll-snap-align: center;
	flex-shrink: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	box-sizing: content-box;
	margin: var(--slideMargin) 0.125em 0;
	overflow: hidden;
}
.reel .card:last-child {
	margin-right: var(--slideMargin);
}

/* Description Card */

.description.card {
	width: var(--slideDescWidth);
	max-width: var(--slideDescContentWidth);
	min-height: calc(100vh - var(--slideMarginTotal) - var(--slidePaddingTotal));
	height: fit-content;
	max-height: calc(100vh - var(--slideMarginTotal));
	padding: var(--slidePadding);
	margin-left: var(--slideMargin);
	border-radius: var(--slidePadding);
	background-position: center;
	clip-path: var(--clipBevel);
}
.description.card > p {
	margin-right: -0.25em;
}

/* Link Card */

.link.card {
	position: relative;
	--slideLinkWidth: calc(100vw - var(--slideMarginTotal) - var(--scrollbarWidth));
	width: calc(var(--slideLinkWidth) / 1.375);
	max-width: 40em;
	min-height: calc((100vh - var(--slideMarginTotal) - var(--slidePaddingTotal)) / 2);
	height: fit-content;
	max-height: calc(100vh - var(--slideMarginTotal));
	aspect-ratio: 3 / 4;
}
@supports not (aspect-ratio: 3 / 4) {
	.link.card::before {
		float: left;
		padding-top: 100%;
		content: "";
	}
	.link.card::after {
		display: block;
		content: "";
		clear: both;
	}
}
.link.card:nth-of-type(4n+2) {
	align-self: flex-start;
}
.link.card:nth-of-type(4n+4) {
	align-self: flex-end;
}
.link.card > svg {
	position: absolute;
	width: auto;
	height: var(--cvB1);
	max-height: 15em;
	fill: var(--paper);
	pointer-events: none;
}
.link.card > svg:nth-of-type(1) {
	top: 0;
	left: 0;
}
.link.card > svg:nth-of-type(2) {
	top: 0;
	right: 0;
	transform: rotate(90deg);
}
.link.card > svg:nth-of-type(3) {
	bottom: 0;
	left: 0;
	transform: rotate(270deg);
}
.link.card > svg:nth-of-type(4) {
	right: 0;
	bottom: 0;
	transform: rotate(180deg);
}
.link.card a {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	font-family: var(--ffLexendPeta);
	font-weight: calc(var(--fwBase) + 225);
	font-size: var(--fsBase);
	text-decoration: none;
}
.link.card img {
	position: absolute;
	width: calc(100% - 2px);
	height: calc(100% - 2px);
	object-fit: cover;
}
.link.card span {
	text-align: center;
	z-index: 1;
}

/* Card Content */

.card *:nth-child(1) {
	margin-top: 0;
}
.card *:nth-last-child(1) {
	margin-bottom: 0;
}
#pmcf-intro {
	background-image: url(../assets/pmcf/azulejo01.svg);
	background-size: calc(var(--fsBase) * 35);
}
#pre-01 {
	background-image: url(../assets/pmcf/azulejo02.svg);
	background-size: calc(var(--fsBase) * 41);
}
#pre-02 {
	background-image: url(../assets/pmcf/azulejo03.svg);
	background-size: calc(var(--fsBase) * 60);
}
#pre-03 {
	background-image: url(../assets/pmcf/azulejo04.svg);
	background-size: calc(var(--fsBase) * 50);
}
#pre-04 {
	background-image: url(../assets/pmcf/azulejo05.svg);
	background-size: calc(var(--fsBase) * 65);
}

/* Footer */

footer > *:not(:last-child) {
	margin-top: calc(var(--slideMargin) * 2);
	margin-bottom: calc(var(--slideMargin) * 2);
}
.contact .card {
	padding: var(--slidePadding);
	border-radius: var(--slidePadding);
}
small.card {
	display: block;
}

/* Constraints */

@media (min-width: 53em) {
	.reel .card:first-child {
		margin-left: var(--slideDescMargins);
	}
	.reel .card:last-child {
		margin-right: var(--slideDescMargins);
	}
	.link.card {
		width: calc(var(--slideLinkWidth) / 2);
	}
}
@media (pointer: coarse) and (max-width: 50em) {
    .gallery .nav {
        display: none;
    }
	.gallery .cta:not(.hidden) {
		display: inline;
	}
}
@media (max-width: 30em) and (min-height: 40em) {
	.description.card {
		min-height: calc(70vh - var(--slideMarginTotal) - var(--slidePaddingTotal));
	}
	.link.card {
		min-height: calc((70vh - var(--slideMarginTotal) - var(--slidePaddingTotal)) / 2);
	}
}

</style>

<script>

// Previous/Next buttons for reels

function initializeButtonFunctionality() {
    const reels = document.querySelectorAll<HTMLElement>('.reel');
    reels.forEach(reel => {
        const prevButton = reel.previousElementSibling as HTMLElement;
        const nextButton = reel.previousElementSibling?.previousElementSibling as HTMLElement;
		const inlineNextButton = reel.querySelector('.cta.next') as HTMLElement; 
        if (!prevButton || !nextButton || !inlineNextButton) return;
        const handleVisibilityUpdate = () => {
            setButtonVisibility(reel, prevButton, nextButton, inlineNextButton);
        };
        prevButton.addEventListener('click', () => {
            scrollToCard(reel, -1);
            handleVisibilityUpdate();
        });
        nextButton.addEventListener('click', () => {
            scrollToCard(reel, 1);
            handleVisibilityUpdate();
        });
		inlineNextButton.addEventListener('click', () => {
            scrollToCard(reel, 1);
            // handleVisibilityUpdate();
        });
        reel.addEventListener('scroll', handleVisibilityUpdate);
        handleVisibilityUpdate();
    });
}
function setButtonVisibility(reel: HTMLElement, prevButton: HTMLElement, nextButton: HTMLElement, inlineNextButton: HTMLElement) {
	const tolerance = 4;
    if (reel.scrollLeft <= tolerance) {
        prevButton.classList.add('hidden');
    } else {
        prevButton.classList.remove('hidden');
    }
    if (reel.scrollLeft + reel.clientWidth + tolerance >= reel.scrollWidth) {
        nextButton.classList.add('hidden');
		// inlineNextButton.classList.add('hidden');
    } else {
        nextButton.classList.remove('hidden');
		// inlineNextButton.classList.remove('hidden');
    }
}
const scrollToCard = (reel: HTMLElement, direction: number) => {
    const cards = reel.querySelectorAll('.card');
    const currentScrollPosition = reel.scrollLeft;
    const cardWidth = cards.length ? (cards[0] as HTMLElement).offsetWidth : 0;
    const newScrollPosition = currentScrollPosition + cardWidth * direction;
    reel.scroll({
        left: newScrollPosition,
        behavior: 'smooth'
    });
};
window.onload = initializeButtonFunctionality;

</script>