---
const { title, description, customClass } = Astro.props;
---
<html lang="en" class={ customClass }>
<head>
	<title>{ title }</title>
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="generator" content={ Astro.generator } />
	<meta name="description" content={ description }>
</head>
<body>
	<div class="preloader">
		<div class="anim"></div>
	</div>
	<slot />
</body>
</html>
<style is:global>
@font-face {
	font-family: "LexendDeca";
	src: url("/fonts/LexendDeca.woff2") format("woff2 supports variations"), url("/fonts/LexendDeca.woff2") format("woff2-variations");
	font-weight: 100 1000;
	font-display: swap;
}
@font-face {
	font-family: "LexendPeta";
	src: url("/fonts/LexendPeta.woff2") format("woff2 supports variations"), url("/fonts/LexendPeta.woff2") format("woff2-variations");
	font-weight: 100 1000;
	font-display: swap;
}
:root {
	/* Colors */
	--paper: #F8F8F7;
	--paper-fade: rgba(248, 248, 247, 0.5);
	--charcoal: #242630;
	--black-light: rgba(0, 0, 0, 0.07);
	--black-fade: rgba(0, 0, 0, 0.2);
	--black-medium: rgba(0, 0, 0, 0.4);
	--black-strong: rgba(0, 0, 0, 0.8);
	--white-light: rgba(255, 255, 255, 0.12);
	--stickie-yellow: #ffe38c;
	--stickie-blue: #bbeeff;
	--stickie-green: #d0f580;
	--stickie-pink: #ffdadf;
	/* Form */
	--sa: 0.03125rem;
	--sb: 0.0625rem;
	--sc: 0.1875rem;
	--sd: 0.3125rem;
	--se: 0.5rem;
	--sf: 0.8125rem;
	--shadow-a: var(--black-fade) 0 0.125rem 0 0;
	--shadow-b: var(--black-light) 0 0.5rem 0 0;
	/* Whiteboard grid control */
	--maxcol-06: 107em;
}
html {
	font-family: "LexendDeca", system-ui, sans-serif;
	font-size: 16px;
	font-weight: 350;
	line-height: 150%;
	color: var(--charcoal);
	background-color: var(--paper);
}
html, body {
	overflow: hidden;
}
body, h1, h2, h3, h4, p, ul {
	margin: 0;
}
h1, h2 {
	font-weight: 650;
	font-size: 3em;
	line-height: 83%;
	letter-spacing: -0.03125em;
	text-transform: uppercase;
	overflow-wrap: break-word;
}
h1, h2, p, li {
    hyphens: auto;
}
h3 {
	font-weight: 550;
	font-size: 1.5em;
	line-height: 133%;
}
h4 {
	font-family: "LexendPeta";
	font-weight: 750;
	font-size: 0.75em;
	line-height: 133%;
	text-transform: uppercase;
}
p {
	font-size: 1em;
	line-height: 150%;
}
ul {
	padding-left: 1.5em;
}
a, a:visited {
	color: inherit;
	overflow-wrap: break-word;
	border-radius: var(--sa);
}
a:hover {
	color: var(--black-medium);
}
a:active {
	color: var(--accent);
}
a:focus {
	outline: 0.125rem solid var(--black-strong);
	outline-offset: 0.0625rem;
}
small {
	font-size: 0.75em;
	font-weight: 375;
	line-height: 133%;
}
small a:hover {
	color: var(--black-strong);
}
.preloader {
	position: fixed;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	height: 100dvh;
	background-color: var(--paper);
	display: flex;
	justify-content: center;
	align-items: center;
	z-index: 8;
	gap: 2em;
	opacity: 1;
  	transition: opacity 1s;
	pointer-events: none;
}
.preloader.hidden {
	opacity: 0;
}
.anim {
	display: inline-block;
	width: 2em;
	height: 2em;
	border: 0.25rem solid var(--charcoal);
	border-top-color: transparent;
	border-radius: 50%;
	animation: spin 1s infinite linear;
}
@keyframes spin {
	to { transform: rotate(360deg); }
}
section {
	display: flex;
	flex-direction: column;
	align-items: flex-start;
	gap: 1em;
	width: max-content;
}
.button-3d {
    height: 2rem;
    display: flex;
    align-items: flex-end;
}
.button-3d.group button {
	min-width: 2.5em;
}
.button-3d.group button:nth-child(1n+2) {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
	border-left: 0.5px solid var(--black-medium);
}
.button-3d.group button:nth-last-child(1n+2) {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
	border-right: 0.5px solid var(--black-medium);
}
button {
	font-family: "LexendDeca", system-ui, sans-serif;
    font-size: 0.8em;
	font-weight: 550;
	line-height: 125%;
    text-transform: uppercase;
    letter-spacing: 0.0625em;
	color: var(--charcoal);
    background-color: var(--paper);
    border: none;
    border-radius: var(--sc);
    padding: 0.5em 0.75em 0.75em;
    cursor: pointer;
    transition: padding 0.1s ease-out, box-shadow 0.1s ease-out;
    box-shadow: var(--black-fade) 0 -0.25em 0 inset;
}
button:hover {
    padding: 0.5em 0.75em 0.5em;
    box-shadow: var(--black-fade) 0 0 0 inset;
}
button:active {
    padding: 0.75em 0.75em 0.25em;
    box-shadow: var(--black-medium) 0 0.25em 0 inset;
}
button:focus {
	outline: 0.125rem solid var(--black-strong);
	outline-offset: 0.125rem;
	z-index: 1;
}
[tags] ul {
	list-style-type: none;
	display: flex;
	flex-flow: row wrap;
	align-items: flex-start;
	gap: 0.5em;
	padding: 0.5em 0 0;
}
[tags] li, code {
    font-weight: 375;
	line-height: 125%;
    padding: 0.125em 0.25em;
	background-color: var(--black-light);
	border-radius: var(--sc);
	white-space: nowrap;
}
code {
	font-family: "LexendDeca", system-ui, sans-serif;
	display: inline-block;
	padding-top: 0;
	padding-bottom: 0;
}
.footnote {
	color: var(--black-medium);
	display: flex;
	flex-direction: column;
	gap: 1rem;
}
.footnote * {
	font-size: inherit;
	line-height: inherit;
}
/* Dark mode */
.dark, #modal.dark .dialog {
	color: var(--paper);
	background-color: var(--charcoal);
}
button.dark {
	background-color: #4a4c58;
	--black-fade: var(--black-medium);
	--black-medium: var(--black-strong);
}
.dark button:focus {
    outline-color: var(--paper);
}
.dark li, .dark code {
	background-color: var(--white-light);
}
@media (max-width: 480px) {
	.button-3d {
		height: 2.5rem;
	}
	button {
		font-size: 1em;
	}
	.whiteboard .button-3d {
		height: 2rem;
	}
	.whiteboard button {
		font-size: 0.8em;
	}
}
</style>
<script>
// Imports
import panzoom, { PanZoom } from 'panzoom';

// Elements
const canvas = document.getElementById('canvas') as HTMLElement;
const inputElements = document.querySelectorAll('input, textarea, button, select, a[href]');
const zoomInButton = document.getElementById('zoomIn');
const zoomOutButton = document.getElementById('zoomOut');
const modal = document.getElementById('modal');
const closeButton = document.getElementById('closeModal');

// Functions

// Zooming
function zoom(pz: PanZoom, isZoomIn: boolean) {
	const scaleFactor = isZoomIn ? 1.1 : 0.9;
	const {width, height} = canvas.getBoundingClientRect();
	const currentTransform = pz.getTransform();
	const x = (width / 2 - currentTransform.x) / currentTransform.scale;
	const y = (height / 2 - currentTransform.y) / currentTransform.scale;
	const newZoom = currentTransform.scale * scaleFactor;
	pz.zoomAbs(x, y, newZoom);
}

// Handle inputs when Modal
function handleInputs(input: HTMLElement, pz: PanZoom, modal: HTMLElement | null) {
	const focusHandler = () => {
		pz.pause();
	};
	input.addEventListener('focus', focusHandler);
	const blurHandler = () => {
		if (modal && !modal.classList.contains('active')) {
			pz.resume();
		}
	};
	input.addEventListener('blur', blurHandler);
	const touchstartHandler = (event: Event) => event.stopPropagation();
	input.addEventListener('touchstart', touchstartHandler);

	// Remove the listeners
	return () => {
		input.removeEventListener('focus', focusHandler);
		input.removeEventListener('blur', blurHandler);
		input.removeEventListener('touchstart', touchstartHandler);
	};
}

// Create panzoom
function initPanzoom() {
	if (canvas) {

		// Options
		const pz = panzoom(canvas, {
			maxZoom: 4.5,
			minZoom: 0.2,
			initialX: 0,
			initialY: 0,
			initialZoom: 0.5,
		});

		// Zoom keys
		zoomInButton?.addEventListener('click', () => zoom(pz, true));
		zoomOutButton?.addEventListener('click', () => zoom(pz, false));

		// Handling interactables
		inputElements.forEach((input) => handleInputs(input as HTMLElement, pz, modal));

		// Resume panzoom when modal is closed
		closeButton?.addEventListener('click', () => pz.resume());

		// Resume panzoom on Escape key press
		document.addEventListener('keydown', (event) => {
			if (event.key === 'Escape') {
				pz.resume();
			}
		});
		
		// Resume panzoom on touch event outside of interactive elements
		document.addEventListener('touchstart', (event) => {
			const isInputFocused = Array.from(inputElements).some((input) =>
				input.contains(event.target as Node)
			);
			if (!isInputFocused) {
				pz.resume();
			}
		});
	}
}

// Initialization
window.addEventListener('load', function() {

	// Start panzoom
	initPanzoom();

	// Wait for page load
	setTimeout(function () {
		
		// Preloader
		const overlay = document.querySelector('.preloader');
		overlay?.classList.add('hidden');

		// Image captions
		const articleElements = document.querySelectorAll('article > p');
		articleElements.forEach((article) => {
		const img = article.querySelector('img');
		if (img) {
			const title = img.getAttribute('title');
			if (title) {

				// Creating the caption elements
				const titleElement = document.createElement('small');
				titleElement.textContent = title;
				img.insertAdjacentElement('afterend', titleElement);
			}
		}
		});
	// Timeout for preloader and captions
	}, 500);
});

// Instruct browser to not store scroll position
history.scrollRestoration = 'manual';
</script>