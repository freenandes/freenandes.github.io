---
// Definitions
const title = "My beautiful website";
const description = "This is my beautiful website description";
const customClass = "index";
const sections = [
	{ title: 'PMCF.XYZ', normTitle: 'pmcf-xyz' },
	{ title: 'Esse', normTitle: 'esse' },
	{ title: 'Why', normTitle: 'why' },
	{ title: 'See', normTitle: 'see' },
];

// Components
import Shell from '../layouts/Shell.astro';
import Stickie from '../components/stickie.astro';
import Contact from '../components/contact.astro';
import Modal from '../components/modal.astro';

// Content

	// Collections
import { getCollection } from 'astro:content';
const firstSection = await getCollection('base');
const secondSection = await getCollection('who');
const thirdSection = await getCollection('why');
const fourthSection = await getCollection('see');

	// Footer
import { Content as Footer } from '../content/extra/footer.md';
---
<Shell title={ title } description={ description } customClass={ customClass }>
	<div class="controls">
		<div class="button-3d">
			<button id="info" class="dark">Info</button>
		</div>
		<div class="button-3d group">
			<button id="zoomOut" class="dark">-</button>
			<button id="zoomIn" class="dark">+</button>
		</div>
		<div class="button-3d">
			<button id="resetNav" class="dark">[]</button>
		</div>
	</div>
	<div id="canvas" class="whiteboard">
		<main>
			<section id={sections[0].normTitle}>
				<h1 class="title">{sections[0].title}</h1>
				{
					firstSection.map(async (post) => {
						const { Content } = await post.render()
						return (
						<Stickie>
							<Content />
						</Stickie>
						)
					})
				}
				<Contact />
				<small class="footnote">
					<Footer />
				</small>
			</section>
			<section id={sections[1].normTitle}>
				<h2 class="title">{sections[1].title}</h2>
				{
					secondSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[1].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
			<section id={sections[2].normTitle}>
				<h2 class="title">{sections[2].title}</h2>
				{
					thirdSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[2].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
			<section id={sections[3].normTitle}>
				<h2 class="title">{sections[3].title}</h2>
				{
					fourthSection.map(async (post) => {
						const { Content } = await post.render();
						const idNum = post.slug.split('-')[0];
						const id = `${sections[3].normTitle}-${idNum}`;
						return (
						<Stickie id={id}>
							<Content />
						</Stickie>
						)
					})
				}
			</section>
		</main>
	</div>
	<Modal title="Info" openID="info" uiMode="dark" />
</Shell>
<style>
html.index :not(a):not(input):not(textarea):not(button) {
	cursor: grab;
}
body {
	position: fixed;
	width: 100vw;
	height: 100vh;
	height: 100dvh;
}
.whiteboard {
	position: absolute;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	height: 100dvh;
	border: none;
	outline: none;
}
main {
	box-sizing: border-box;
	display: flex;
	flex-direction: row;
	align-items: flex-start;
	gap: 24em;
	width: fit-content;
	padding: 24em;
	background-size: 1em 1em;
	background-position: 0 0;
	background-image: radial-gradient(var(--black-light) 0.0625em, transparent 0.0625em);
}
.title {
	margin-bottom: 1.5rem;
}
section:not(#pmcf-xyz) :global(article:not(:last-child)) {
	margin-bottom: 5em;
}
section:nth-child(2) :global(article > *) {
    background-color: var(--stickie-blue);
}
section:nth-child(3) :global(article > *) {
    background-color: var(--stickie-green);
}
section:nth-child(4) :global(article > *) {
    background-color: var(--stickie-pink);
}
.controls {
	display: flex;
	gap: 0.5em;
	position: fixed;
	right: 1em;
	bottom: 1em;
	z-index: 2;
}
.footnote {
	margin-top: 1rem;
}

/* Content design */
#pmcf-xyz {
	max-width: var(--maxcol-01);
}
</style>